embed {{ tex-preamble }}

metavar  var, x {{ tex x }}, y {{ tex y }}, z {{ tex z }}, f {{ tex f }}, g {{tex g }} ::= {{ com variables }}
metavar  n, s, numeral ::= {{ com literal number }} {{ lex numeral }}
indexvar i {{ tex i }}, j {{ tex j }} ::= {{ lex numeral }}
metavar l {{ tex \ell }} ::= {{ com store locations }}

grammar
A, B :: 'A_' ::= {{ com Value Types }}
 | TopV   :: :: topv
 | Num    :: :: num
 | Str    :: :: str
 | Dict Delta :: :: dict
 | Ref A :: :: ref
 | U C   :: :: u
 | ( A ) :: S :: paren
 | 1     :: S :: unit
 | 2     :: S :: bool
 | Db A  ::   :: db

Delta {{ tex \Delta }} :: 'Delta_' ::= {{ com Dictionary types: Internal structure}}
 | emp             :: :: emp
 | Delta , v => A  :: :: cons
 | ( Delta )       :: S :: paren
 | Delta1 , Delta2 :: :: append

C, D :: 'C_' ::= {{ com Computation Types }}
 | TopC   :: :: topc
 | A -> C :: :: arr
 | F A    :: :: f
 | ( C ) :: S :: paren

ae {{ tex a^\textsf{e} }} :: 'ae_' ::= {{ com Annotations for expressions }}
 | C :: :: c

av {{ tex a^\textsf{v} }} :: 'av_' ::= {{ com Anotations for values }}
 | A :: :: a

e :: 'e_' ::= {{ com Expressions: Annotated pre-expressions }}
 | ( pe : ae ) :: :: e

pe {{ tex \dot{e} }} :: 'pe_' ::= {{ com Pre-Expressions }}
 | e v               :: :: app
 | lam x . e         :: :: lam {{ tex \lambda [[x]]. [[e]] }}
 | let x = e1 in e2  :: :: let
 | ret v             :: :: ret
 | force v           :: :: force
 | ref v             :: :: ref
 | set v1 v2         :: :: set
 | get v             :: :: get
 | ext v1 v2 v3      :: :: ext
 | proj v1 v2        :: :: proj

 | openDb v :: :: openDb
 | filterDb v1 v2 :: :: filterDb
 | joinDb v1 v2 v3 v4 :: :: joinDb

env {{ tex \rho }} :: 'env_' ::=
 | emp          :: :: emp
 | env , x => v :: :: cons

stack {{ tex \kappa }} :: 'stack_' ::=
 | halt                         :: :: halt
 | stack :::: v                 :: :: app
 | stack :::: ( env , x . e2 )  :: :: let

store {{ tex \mu }} :: 'store_' ::=
 | emp             :: :: emp
 | store , l => v  :: :: cons

state {{ tex \sigma }} :: '' ::=
 | < store ; stack ; env ; pe > :: :: state {{ tex \left< [[store]]; [[stack]]; [[env]]; [[pe]] \right> }}

v :: 'v_' ::= {{ com Values: Annotated Pre-Values }}
 | ( pv : av )  :: :: v

pv {{ tex \dot{v} }} :: 'pv_' ::=  {{ com Pre-Values }}
 | othunk e      :: :: othunk
 | thunk env e   :: :: thunk
 | dict delta    :: :: dict
 | num n         :: :: num
 | str s         :: :: str
 | loc l         :: :: loc
 | x             :: :: x
 | ()            :: S :: unit

delta {{ tex \delta }} :: 'delta_' ::= {{ com Dictionary values: Internal structure }}
 | emp               :: :: emp
 | delta , v1 => v2  :: :: cons
 | ( delta )         :: :: paren

Ctx {{ tex \Gamma }} :: 'Ctx_' ::= 
 | emp             :: :: emp
 | Ctx , x : A     :: :: cons
 | ctxify store    :: :: ctxify {{ tex \left|[[store]]\right| }}
 | Ctx1 , Ctx2     :: S :: append

defns
Jtyp :: '' ::=

defn
Ctx |- e : C
:: :: type :: ''
{{ com Expression Typing }}
by

Ctx |- pe : C
----------------------- :: tye
Ctx |- ( pe : ae ) : C

defn
Ctx |- pe : C
:: :: typc :: 'tyc_'
{{ com Computation Typing }}
by

Ctx |- v : A
Ctx |- e : A -> C
--------------------- :: app
Ctx |- e v : C

Ctx, x:A |- e : C
-------------------------- :: lam
Ctx |- lam x . e : A -> C

Ctx |- e : F A
Ctx , x : A |- e : C
--------------------------- :: let
Ctx |- let x = e1 in e2 : C

Ctx |- v : A
-------------------- :: ret
Ctx |- ret v : F A

Ctx |- v : U C
-------------------- :: force
Ctx |- force v : C

Ctx |- v : A
----------------------- :: ref
Ctx |- ref v : F (Ref A)

Ctx |- v : Ref A
----------------------- :: get
Ctx |- get v : F A

Ctx |- v1 : Ref A
Ctx |- v2 : A
----------------------- :: set
Ctx |- set v1 v2 : F 1

Ctx |- v1 : Dict Delta
Ctx |- v2 : A
Ctx |- v3 : B
------------------------------------------------- :: ext
Ctx |- ext v1 v2 v3 : F (Dict (Delta, v2 => B))

Ctx |- v1 : Dict Delta
Ctx |- v2 : A
------------------------------------------------- :: projTop
Ctx |- proj v1 v2 : F TopV

Ctx |- v1 : Dict (Delta, v2 => B)
emp |- v2 : A
------------------------------------------------- :: proj
Ctx |- proj v1 v2 : F B


Ctx |- v : Str
-------------------------- :: openDbTop
Ctx |- openDb v : F TopV

Ctx |- v1 : Db A
Ctx |- v2 : U( A -> F 2)
--------------------------------- :: filterDb
Ctx |- filterDb v1 v2 : F (Db A)

Ctx |- v1 : Db (Dict (Delta1))
Ctx |- v2 : A1
Ctx |- v3 : Db (Dict (Delta2))
Ctx |- v4 : A2
------------------------------------------------------------------------------ :: joinDbTop
Ctx |- joinDb v1 v2 v3 v4 : F (Db TopV)

Ctx |- v1 : Db (Dict (Delta1, v2 => B))
emp |- v2 : A1
Ctx |- v3 : Db (Dict (Delta2, v4 => B))
emp |- v4 : A2
------------------------------------------------------------------------------ :: joinDb
Ctx |- joinDb v1 v2 v3 v4 : F (Db (Dict (Delta1, Delta2, v2 => B, v4 => B)))


defn
Ctx |- v : A
:: :: tyv :: ''
{{ com Value Typing }}
by

Ctx |- pv : A
-------------------------- :: tyv
Ctx |- ( pv : av ) : A

defn
Ctx |- pv : A
:: :: typv :: 'typv_'
{{ com Value Typing }}
by

---------------------- :: var
Ctx, x : A |- x : A

------------------------------------------------- :: loc
ctxify store, l => (pv: A), Ctx |- loc l : A

------------------------------------------------- :: Str
Ctx |- str s : Str

------------------------------------------------- :: Num
Ctx |- num n : Num

--------------------------- :: dictEmp
Ctx |- dict emp : Dict emp

Ctx |- dict (delta) : Dict (Delta)
Ctx |- v1 : A
Ctx |- v2 : B
--------------------------------------------------------- :: dictCons
Ctx |- dict (delta, v1 => v2) : Dict (Delta, v1 => B)


Ctx |- e : C
------------------------ :: othunk
Ctx |- othunk e : U C

Ctx  |- env ~~> Ctx'
Ctx' |- e : C
------------------------ :: thunk
Ctx  |- thunk env e : U C


defn
Ctx |- env ~~> Ctx'
:: :: envt :: 'envt_'
{{ com Environment Typing }}
by

------------------ :: emp
Ctx |- emp ~~> emp

Ctx |- env ~~> Ctx'
Ctx |- v : A
--------------------------------- :: cons
Ctx |- env, x => v ~~> Ctx', x:A

defn
Ctx |- stack <~~ C
:: :: stackt :: 'stackt_'
{{ tex [[Ctx]] [[|-]] [[stack]] \Leftarrow [[C]] }}
{{ com Stack Typing }}
by

----------------- :: emp
Ctx |- halt <~~ C

Ctx |- stack <~~ C
Ctx |- env ~~> Ctx
Ctx, x:A |- e : C
------------------------------------- :: let
Ctx |- stack :::: (env, x.e) <~~ F A

Ctx |- v : A
Ctx |- stack <~~ C
----------------------------------- :: app
Ctx |- stack :::: v <~~ A -> C


defn
state ok
:: :: state_ok :: ''
by

ctxify store      |- env ~~> Ctx
ctxify store, Ctx |- pe : C
ctxify store      |- stack <~~ C
----------------------------------- :: 'State_ok'
<store; stack; env; pe> ok


defn
state final
:: :: state_final :: 'Fin_'
by

--------------------------------- :: ret
<store; halt; env; ret v> final

----------------------------------- :: lam
<store; halt; env; lam x.e> final

defn
env v ~> v'
:: :: close_val :: 'S_'
{{ tex [[env]]([[v]]) = [[v']] }}
by

defn
l notin store
:: :: loc_not_in_store :: ''
{{ tex [[l]] \not\in [[store]] }}
by


defn
state --> state'
:: :: state_step :: 'S_'
by


--------------------------------------------------------------------------------------------- :: let
<store; stack; env; let x = (pe1:ae1) in e2> --> <store; stack :::: (env, x. e2); env; pe1>

env v ~> v'
--------------------------------------------------------------------------------------- :: ret
<store; stack :::: (env, x.(pe:ae)); env'; ret v> --> <store; stack; env, x => v'; pe>

env v ~> v'
------------------------------------------------------------------- :: app
<store; stack; env; (pe:ae) v> --> <store; stack :::: v'; env; pe>

------------------------------------------------------------------------------- :: lam
<store; stack :::: v; env; lam x.(pe:ae)> --> <store; stack; env, x => v; pe>

env v ~> (thunk env' (pe:ae) : av)
----------------------------------------------------------- :: force
<store; stack; env; force v> --> <store; stack; env'; pe>

l notin store
-------------------------------------------------------------------------------- :: ref
<store; stack; env; ref v> --> <store, l => v; stack; env; ret (loc l : TopV)>

env v1 ~> (loc l : av)
env v2 ~> v2'
--------------------------------------------------------------------------------- :: set
<store; stack; env; set v1 v2> --> <store, l => v2'; stack; env; ret (() : TopV)>

env v1 ~> (loc l : av)
--------------------------------------------------------------------------- :: get
<store, l=>v2; stack; env; get v1> --> <store, l=>v2; stack; env; ret v2>

env v1 ~> (dict delta : av)
env v2 ~> v2'
env v3 ~> v3'
--------------------------------------------------------------------------------------------- :: ext
<store; stack; env; ext v1 v2 v3> --> <store; stack; env; ret (dict (delta, v2'=>v3'):TopV)>

env v2 ~> v2'
env v1 ~> (dict (delta, v2' => v3) : av)
--------------------------------------------------------------------- :: proj
<store; stack; env; proj v1 v2> --> <store; stack; env; ret v3>

% | openDb v :: :: openDb
% | filterDb v1 v2 :: :: filterDb
% | joinDb v1 v2 v3 v4 :: :: joinDb


grammar
  terminals :: 'terminals_' ::=
    | =>       :: :: Rightarrow {{ tex \Rightarrow }}
    | ::::     :: :: dubcolons {{ tex :: }}
    | Lam      :: :: Lambda   {{ tex \Lambda }}
    | forall   :: :: forall {{ tex \forall }}
    | .>       :: :: ltriangle {{ tex \rhd }}
    | (|       :: :: lensleft  {{ tex (\!| }}
    | |)       :: :: lensright {{ tex |\!) }}
    | mrk      :: :: mrk      {{ tex {\bullet} }}
    | o        :: :: comp     {{ tex {\circ} }}
    | oo       :: :: compB    {{ tex \circ }}
    | <>       :: :: ne       {{ tex \ne }}
    | ~>       :: :: tildearr {{ tex \leadsto }}
    | ~~>      :: :: tildearr2 {{ tex \leadsto }}
    | -->      :: :: longrightarrow {{ tex \longrightarrow }}
    | ^^       :: :: bigsrch  {{ tex \bigtriangleup }}
    | VV       :: :: bigpatch {{ tex \bigtriangledown }}
%    | VV       :: :: bigpatch {{ tex \unlhd }}
    | ``       :: :: bigprop  {{ tex \curvearrowright }}
    | ``alg    :: :: propalg  {{ tex \curvearrowright_{\textsf{alg} } }}
    | ``spec   :: :: propspec  {{ tex \curvearrowright_{\textsf{prop} } }}
%    | ``wlk    :: :: wlk      {{ tex \curvearrowright_{\textsf{wlk} } }}
%    | ``cost   :: :: cost     {{ tex {\twoheadrightarrow}_{\Delta} }}
%    | ``costs  :: :: coststar {{ tex {\curvearrowright}_{\Delta} }}
    | !!       :: :: bigstep  {{ tex \Downarrow }}
    | !!!      :: :: Bigstep  {{ tex \downarrow }}
    | ~        :: :: equiv    {{ tex \approx }}
    | Box      :: :: Box      {{ tex \square }}
    | >>=      :: :: bind     {{ tex \mathrel{\texttt{>\!>=} } }}
    | halt     :: :: halt     {{ tex \textsf{halt} }}
    | prop     :: :: prop     {{ tex \textsf{prop} }}
    | rewind   :: :: rewind   {{ tex \circlearrowleft }}
    | \        :: :: lambda   {{ tex \lambda }}
    | alpha    :: :: alpha    {{ tex \alpha }}
    | beta     :: :: beta     {{ tex \beta }}
    | bot      :: :: bot      {{ tex \bot }}
    | top      :: :: top      {{ tex \top }}
    | ->       :: :: rightarr {{ tex \rightarrow }}
    | syn       :: :: syn {{ tex \Rightarrow }}
    | chk       :: :: chk {{ tex \Leftarrow }}
    | chkv       :: :: chkv {{ tex \mathrel{ {\Leftarrow}_{\mathsf{V} } } }}
    | chke       :: :: chke {{ tex \mathrel{ {\Leftarrow}_{\mathsf{E} } } }}
    | -o       :: :: lolli    {{ tex \multimap }}
    | <-       :: :: leftarr  {{ tex \leftarrow }}
%    | |->      :: :: mapsto   {{ tex {\mapsto} }}
    | |->      :: :: mapsto   {{ tex {\mapsto} }}
%    | -->      :: :: stepsto  {{ tex \alignrel{\longrightarrow} }}
    | /->      :: :: leadsto  {{ tex \leadsto }}
    | \->      :: :: pointsto {{ tex \hookrightarrow }}
    | <<       :: :: lbracket {{ tex \left<\right. }}
    | >>       :: :: rbracket {{ tex \left.\right> }}
    | *        :: :: dot      {{ tex \cdot }}
    | __       :: :: hole     {{ tex [] }}
    | /\       :: :: and      {{ tex \wedge }}
    | \/       :: :: or       {{ tex \vee }}
    | subseteq :: :: subseteq {{ tex \subseteq }}
    | <=       :: :: le       {{ tex \le }}
    | -|       :: :: dashv    {{ tex \dashv }}
    | |-       :: :: vdash    {{ tex \vdash }}
    | ||-       :: :: vvdash    {{ tex \Vdash }}
    | |/-      :: :: nvdash   {{ tex \not\vdash }}
    | |=       :: :: vDash    {{ tex \vDash }}
%    | D      :: :: deriv  {{ tex \D }}
    | Delta      :: :: delta  {{ tex \Delta }}
%    | ==>      :: :: impty    {{ tex \impty }}
%    | &&       :: :: withty   {{ tex \withty }}
    | TopC    :: :: topc    {{ tex \top_\textsf{C} }}
    | TopV    :: :: topv    {{ tex \top_\textsf{V} }}
    | union    :: :: union    {{ tex \cup }}
    | mem      :: :: mem      {{ tex \in }}
    | notin    :: :: notin    {{ tex \notin }}
    | @        :: :: append   {{ tex {\mathrel{@} } }}
    | emp      :: :: emp      {{ tex \varepsilon }}
    | ok       :: :: ok       {{ tex {\textsf{ok} } }}
    | wf       :: :: wf       {{ tex {\textsf{wf} } }}
